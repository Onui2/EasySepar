import tkinter as tk
from tkinter import scrolledtext, messagebox, ttk
import re
from typing import List


class TextProcessor:
    def __init__(self):
        self.exceptions = {
            'Mr.', 'Mrs.', 'Ms.', 'Dr.', 'Prof.', 'Sr.', 'Jr.',
            'vs.', 'etc.', 'i.e.', 'e.g.', 'a.m.', 'p.m.',
            '씨.', '님.',
            'Vol.', 'No.',
            'Jan.', 'Feb.', 'Mar.', 'Apr.', 'Aug.', 'Sept.', 'Oct.', 'Nov.', 'Dec.',
            'Dept.', 'Corp.', 'Inc.', 'Co.', 'Ltd.',
            '.com', '.org', '.net', '.kr', '.uk'
        }

        self.sentence_enders = {
            '습니다', '입니다', '합니다', '니다',
            '어요', '아요', '예요', '네요',
            '세요', '되요', '해요',
            '었다', '았다', '였다',
            '된다', '한다', '군요', '네요',
            '는걸', '는데', '구나', '다니'
        }

    def split_sentences(self, text: str) -> List[str]:
        if not text:
            return []

        temp_text = text
        replacements = {}
        for i, exc in enumerate(self.exceptions):
            token = f"__TEMP_TOKEN_{i}__"
            replacements[token] = exc
            temp_text = temp_text.replace(exc, token)

        sentence_pattern = r'(?<=[.!?])\s+(?=[A-Z가-힣])|' + \
                           '|'.join(fr'(?<={ender})\s+' for ender in self.sentence_enders)

        sentences = re.split(sentence_pattern, temp_text)

        restored_sentences = []
        for sentence in sentences:
            restored = sentence.strip()
            for token, original in replacements.items():
                restored = restored.replace(token, original)
            if restored:
                restored_sentences.append(restored)

        return restored_sentences

    def split_paragraphs(self, text: str) -> List[str]:
        if not text:
            return []

        paragraphs = []
        raw_paragraphs = re.split(r'\n\s*\n', text)

        for para in raw_paragraphs:
            cleaned = re.sub(r'\s+', ' ', para.strip())
            if cleaned:
                paragraphs.append(cleaned)

        return paragraphs


class TextProcessorGUI:
    def __init__(self, root):
        self.root = root
        self.root.title("EasySepar")
        self.root.geometry("600x600")
        self.processor = TextProcessor()
        self.create_widgets()

    def create_widgets(self):
        # 입력 영역
        input_frame = ttk.LabelFrame(self.root, text="Input Text")
        input_frame.pack(padx=10, pady=5, fill="both", expand=True)

        self.input_text = scrolledtext.ScrolledText(input_frame, height=10)
        self.input_text.pack(fill="both", expand=True)

        # 버튼 영역
        button_frame = ttk.Frame(self.root)
        button_frame.pack(pady=5)

        # 글자 수를 표시할 레이블을 Sentence 버튼 왼쪽에 배치
        ttk.Label(button_frame, text="Text : ").pack(side=tk.LEFT, padx=(5, 0))
        self.char_count_label = ttk.Label(button_frame, text="(0)")
        self.char_count_label.pack(side=tk.LEFT, padx=(0, 5))
        ttk.Button(button_frame, text="Sentence", command=self.process_text).pack(side=tk.LEFT, padx=5)

        ttk.Button(button_frame, text="Paragraph", command=self.split_paragraphs).pack(side=tk.LEFT, padx=5)
        ttk.Button(button_frame, text="Paste", command=self.paste_from_clipboard).pack(side=tk.LEFT, padx=5)
        ttk.Button(button_frame, text="Clear", command=self.clear_text).pack(side=tk.LEFT, padx=5)

        # 결과 영역
        result_frame = ttk.LabelFrame(self.root, text="Split Text")
        result_frame.pack(padx=10, pady=5, fill="both", expand=True)

        self.result_text = scrolledtext.ScrolledText(result_frame, height=10, state=tk.DISABLED)
        self.result_text.pack(fill="both", expand=True)

        # 텍스트 입력 시 글자 수 자동 업데이트
        self.input_text.bind('<KeyRelease>', self.update_char_count)

    def copy_to_clipboard(self, text):
        self.root.clipboard_clear()
        self.root.clipboard_append(text)

    def paste_from_clipboard(self):
        try:
            clipboard_text = self.root.clipboard_get()
            self.input_text.insert(tk.END, clipboard_text)
            self.update_char_count()  # 붙여넣기 후 글자 수 업데이트
        except tk.TclError:
            messagebox.showerror("Error", "No text on the clipboard.")

    def clear_text(self):
        self.input_text.delete("1.0", tk.END)
        self.result_text.config(state=tk.NORMAL)
        self.result_text.delete("1.0", tk.END)
        self.result_text.config(state=tk.DISABLED)
        self.update_char_count()  # 텍스트 클리어 후 글자 수 업데이트

    # 글자 수 업데이트 메서드 추가
    def update_char_count(self, event=None):
        text = self.input_text.get("1.0", tk.END).strip()
        count = len(text)  # 공백 포함 글자 수
        self.char_count_label.config(text=f"({count})")

    def process_text(self):
        input_text = self.input_text.get("1.0", tk.END).strip()
        if input_text:
            sentences = self.processor.split_sentences(input_text)
            self.display_result(sentences)
        else:
            messagebox.showwarning("Warning", "Please enter text.")

    def split_paragraphs(self):
        input_text = self.input_text.get("1.0", tk.END).strip()
        if input_text:
            paragraphs = self.processor.split_paragraphs(input_text)
            self.display_result(paragraphs)
        else:
            messagebox.showwarning("Warning", "Please enter text.")

    def display_result(self, items):
        self.result_text.config(state=tk.NORMAL)
        self.result_text.delete("1.0", tk.END)

        for idx, item in enumerate(items, 1):
            frame = ttk.Frame(self.result_text)
            self.result_text.window_create(tk.END, window=frame)

            copy_button = ttk.Button(frame, text=f"{idx}. Copy",
                                     command=lambda item=item: self.copy_to_clipboard(item))
            copy_button.pack(side=tk.LEFT)

            ttk.Label(frame, text=item).pack(side=tk.LEFT, padx=(5, 0))
            self.result_text.insert(tk.END, "\n")

        self.result_text.config(state=tk.DISABLED)


def main():
    root = tk.Tk()
    app = TextProcessorGUI(root)
    root.mainloop()


if __name__ == "__main__":
    main()
